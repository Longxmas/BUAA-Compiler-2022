CONSTTK const
INTTK int
IDENFR _1
ASSIGN =
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR _3
ASSIGN =
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR _____
ASSIGN =
INTCON 376789
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 326
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 23167
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
PLUS +
<UnaryOp>
INTCON 3427
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 276
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 13
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR _2
ASSIGN =
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR _10
ASSIGN =
MINU -
<UnaryOp>
INTCON 10
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 123
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
INTCON 666
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 233
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
LPARENT (
INTCON 21
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
PLUS +
<UnaryOp>
LPARENT (
MINU -
<UnaryOp>
LPARENT (
PLUS +
<UnaryOp>
LPARENT (
MINU -
<UnaryOp>
LPARENT (
PLUS +
<UnaryOp>
LPARENT (
LPARENT (
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR aaa
LBRACK [
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10086
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR A
LBRACK [
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
INTCON 233
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 212132
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR _3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 1234
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
IDENFR _1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
MINU -
<UnaryOp>
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 657
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 24
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
IDENFR _2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 57024
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
IDENFR _10
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR _2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR _3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
INTCON 8792
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
MINU -
<UnaryOp>
INTCON 289
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 2378
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 89
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 908
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
IDENFR _10
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
INTCON 2768
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 13
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
LPARENT (
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
INTCON 10086
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
MINU -
<UnaryOp>
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
PLUS +
<UnaryOp>
INTCON 20
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
INTTK int
IDENFR _3cg
ASSIGN =
IDENFR _10
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 2364
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 324567
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
LPARENT (
MINU -
<UnaryOp>
INTCON 34
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
MINU -
<UnaryOp>
INTCON 213
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 10009921
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR hdc33ec_dyu
ASSIGN =
MINU -
<UnaryOp>
INTCON 278
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 2318
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 10009921
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
PLUS +
<UnaryOp>
INTCON 234
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 831
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR cdh3yi_23
<VarDef>
COMMA ,
IDENFR duhih2_23c
ASSIGN =
INTCON 1983
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR _23879
LBRACK [
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2323
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
PLUS +
<UnaryOp>
INTCON 9382
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 23
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 23
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 128
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
LPARENT (
MINU -
<UnaryOp>
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 390042
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 204
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 8137
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR dijhw
LBRACK [
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
COMMA ,
IDENFR cdwuh
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
COMMA ,
IDENFR wuei
<VarDef>
COMMA ,
IDENFR _3u22
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 287
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
IDENFR _____
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
COMMA ,
LBRACE {
INTCON 287
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2786
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
MINU -
<UnaryOp>
INTCON 8719
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR jdfo_
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
<FuncType>
IDENFR __my_Ha_s__h
LPARENT (
INTTK int
IDENFR _
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR len
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
INTTK int
IDENFR __
<VarDef>
COMMA ,
IDENFR I
<VarDef>
SEMICN ;
<VarDecl>
IDENFR __
<LVal>
ASSIGN =
IDENFR len
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR I
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
WHILETK while
LPARENT (
IDENFR I
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
IDENFR len
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
IDENFR __
<LVal>
ASSIGN =
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 98326464
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR __
<LVal>
ASSIGN =
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 20373381
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR __
<LVal>
ASSIGN =
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 23667832
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR __
<LVal>
ASSIGN =
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 133
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR __
<LVal>
ASSIGN =
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1347887899
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR __
<LVal>
ASSIGN =
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 99998099
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR __
<LVal>
ASSIGN =
LPARENT (
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 123671861
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 236234
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
LPARENT (
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 135632
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR I
<LVal>
ASSIGN =
IDENFR I
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
MINU -
<UnaryOp>
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
LPARENT (
INTCON 1234
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 888
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RETURNTK return
IDENFR __
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR ___
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n"
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR ____
LPARENT (
INTTK int
IDENFR _arg
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "//called func: ____, _arg = %d\n"
COMMA ,
IDENFR _arg
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR __
LPARENT (
INTTK int
IDENFR _arr_Ay
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR useless
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "called func: __, array[0] = %d\n\n\n"
COMMA ,
IDENFR _arr_Ay
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
RETURNTK return
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR _Main
LPARENT (
INTTK int
IDENFR _arr_Ay
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "called func: Main, array[0][0] = %d, array[0][1] = %d\n\n"
COMMA ,
IDENFR _arr_Ay
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR _arr_Ay
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR _add_fake
LPARENT (
INTTK int
IDENFR a
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GEQ >=
INTCON 100
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 10086
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
INTCON 203
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 201
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
ELSETK else
IFTK if
LPARENT (
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 10086
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 12345678
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1003
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 1009
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 2022
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2019
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
ELSETK else
LBRACE {
RETURNTK return
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 233
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
<Stmt>
RETURNTK return
MINU -
<UnaryOp>
INTCON 10086
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR _add
LPARENT (
INTTK int
IDENFR a
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
<FuncFParam>
COMMA ,
INTTK int
IDENFR c
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR c
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR _get_id
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR _2_wj5qhidw_
<VarDef>
SEMICN ;
<VarDecl>
IDENFR _2_wj5qhidw_
<LVal>
ASSIGN =
INTCON 76
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
LBRACE {
SEMICN ;
<Stmt>
INTCON 123
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2_wj5qhidw_
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
IDENFR _2_wj5qhidw_
<LVal>
ASSIGN =
INTCON 10086
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2_wj5qhidw_
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
INTTK int
IDENFR _2_wj5qhidw_
ASSIGN =
PLUS +
<UnaryOp>
MINU -
<UnaryOp>
PLUS +
<UnaryOp>
INTCON 10
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2_wj5qhidw_
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
RETURNTK return
INTCON 20373381
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR _M__a_G_I___c
LPARENT (
INTTK int
IDENFR num
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
LPARENT (
LPARENT (
LPARENT (
IDENFR num
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
MINU -
<UnaryOp>
INTCON 763835168
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 1996325548
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 1881457024
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 540488577
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 17
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IDENFR a
<LVal>
ASSIGN =
MINU -
<UnaryOp>
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "temp: %d\n"
COMMA ,
IDENFR temp
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "my_hash = %d\n"
COMMA ,
IDENFR __my_Ha_s__h
LPARENT (
IDENFR cdwuh
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "magic = %d\n"
COMMA ,
IDENFR _M__a_G_I___c
LPARENT (
INTCON 245512106
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "magic_first = %d\n"
COMMA ,
LPARENT (
INTCON 245512106
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
MINU -
<UnaryOp>
INTCON 763835168
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "magic_second = %d\n"
COMMA ,
LPARENT (
MINU -
<UnaryOp>
INTCON 518323062
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 1996325548
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
null<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
